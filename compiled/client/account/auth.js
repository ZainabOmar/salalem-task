'use strict';

angular.module('otbo5ly.auth', []).controller('AuthController', function ($scope, $window, $location, $rootScope, Auth, Users) {
  $scope.user = {};

  Users.getCookingNames().then(function (data) {
    $scope.cookingNames = data;
  });

  $scope.signin = function () {
    Auth.signin($scope.user).then(function (data) {
      //console.log(data)

      if (data.status === '500') {
        $scope.msg = 'Wrong password or username!';
      } else {

        $scope.msg = '';

        $window.localStorage.setItem('com.otbo5ly', data.token);

        var userData = { ID: data.ID,
          UserName: data.UserName, UserTypeName: data.UserTypeName };

        $window.localStorage.setItem('user.otbo5ly', JSON.stringify(userData));

        $rootScope.isLoggedIn = true;
        $rootScope.UserName = data.UserName;
        $rootScope.UserID = data.ID;

        if (data.UserTypeName === 'cooker') {
          $rootScope.isCooker = true;
          $location.path('/users/' + data.UserName);
        } else {
          $location.path('/');
        }
      }
    }).catch(function (error) {
      console.log(error);
    });
  };

  $scope.signup = function () {
    if ($scope.isCooker) {
      $scope.user.userType = 'cooker';
    } else {
      $scope.user.userType = 'user';
    }
    Auth.signup($scope.user).then(function (data) {
      //console.log(data)

      if (data.status === '500') {
        $scope.msg = 'Wrong password or username!';
      } else {

        $scope.msg = '';

        $window.localStorage.setItem('com.otbo5ly', data.token);

        var userData = { ID: data.ID,
          UserName: data.UserName, UserTypeName: data.UserTypeName };

        $window.localStorage.setItem('user.otbo5ly', JSON.stringify(userData));

        $rootScope.isLoggedIn = true;
        $rootScope.UserName = data.UserName;
        $rootScope.UserID = data.ID;

        if (data.UserTypeName === 'cooker') {
          $rootScope.isCooker = true;
          $location.path('/users/' + data.UserName);
        } else {
          $location.path('/');
        }
      }
    }).catch(function (error) {
      console.error(error);
    });
  };

  $scope.signout = function () {
    Auth.signout();
  };

  // var checkPassword = function(password){
  //   var regularExpression = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$/;
  //   return regularExpression.test(password);
  // };

  // var checkUserName = function(user){
  //   var regularExpression = /^[a-zA-Z0-9]+$/;
  //   return regularExpression.test(user);
  // };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hY2NvdW50L2F1dGguanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkd2luZG93IiwiJGxvY2F0aW9uIiwiJHJvb3RTY29wZSIsIkF1dGgiLCJVc2VycyIsInVzZXIiLCJnZXRDb29raW5nTmFtZXMiLCJ0aGVuIiwiZGF0YSIsImNvb2tpbmdOYW1lcyIsInNpZ25pbiIsInN0YXR1cyIsIm1zZyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJ0b2tlbiIsInVzZXJEYXRhIiwiSUQiLCJVc2VyTmFtZSIsIlVzZXJUeXBlTmFtZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc0xvZ2dlZEluIiwiVXNlcklEIiwiaXNDb29rZXIiLCJwYXRoIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJzaWdudXAiLCJ1c2VyVHlwZSIsInNpZ25vdXQiXSwibWFwcGluZ3MiOiI7O0FBQUFBLFFBQVFDLE1BQVIsQ0FBZSxjQUFmLEVBQStCLEVBQS9CLEVBRUNDLFVBRkQsQ0FFWSxnQkFGWixFQUU4QixVQUFVQyxNQUFWLEVBQWtCQyxPQUFsQixFQUEyQkMsU0FBM0IsRUFBc0NDLFVBQXRDLEVBQWtEQyxJQUFsRCxFQUF3REMsS0FBeEQsRUFBK0Q7QUFDM0ZMLFNBQU9NLElBQVAsR0FBYyxFQUFkOztBQUVBRCxRQUFNRSxlQUFOLEdBQXdCQyxJQUF4QixDQUE2QixVQUFTQyxJQUFULEVBQWM7QUFDekNULFdBQU9VLFlBQVAsR0FBc0JELElBQXRCO0FBQ0QsR0FGRDs7QUFLQVQsU0FBT1csTUFBUCxHQUFnQixZQUFZO0FBQ3hCUCxTQUFLTyxNQUFMLENBQVlYLE9BQU9NLElBQW5CLEVBQ0dFLElBREgsQ0FDUSxVQUFVQyxJQUFWLEVBQWdCO0FBQ3BCOztBQUVBLFVBQUdBLEtBQUtHLE1BQUwsS0FBZ0IsS0FBbkIsRUFBeUI7QUFDdkJaLGVBQU9hLEdBQVAsR0FBYSw2QkFBYjtBQUNELE9B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Ym81bHkuYXV0aCcsIFtdKVxyXG5cclxuLmNvbnRyb2xsZXIoJ0F1dGhDb250cm9sbGVyJywgZnVuY3Rpb24gKCRzY29wZSwgJHdpbmRvdywgJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCBBdXRoLCBVc2Vycykge1xyXG4gICRzY29wZS51c2VyID0ge307XHJcblxyXG4gIFVzZXJzLmdldENvb2tpbmdOYW1lcygpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAkc2NvcGUuY29va2luZ05hbWVzID0gZGF0YTtcclxuICB9KVxyXG5cclxuXHJcbiAgJHNjb3BlLnNpZ25pbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgQXV0aC5zaWduaW4oJHNjb3BlLnVzZXIpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coZGF0YSlcclxuXHJcbiAgICAgICAgICBpZihkYXRhLnN0YXR1cyA9PT0gJzUwMCcpe1xyXG4gICAgICAgICAgICAkc2NvcGUubXNnID0gJ1dyb25nIHBhc3N3b3JkIG9yIHVzZXJuYW1lISdcclxuICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUubXNnID0gJyc7XHJcblxyXG4gICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjb20ub3RibzVseScsIGRhdGEudG9rZW4pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHVzZXJEYXRhID0ge0lEOmRhdGEuSUQsIFxyXG4gICAgICAgICAgICAgIFVzZXJOYW1lOiBkYXRhLlVzZXJOYW1lLCBVc2VyVHlwZU5hbWU6IGRhdGEuVXNlclR5cGVOYW1lfTtcclxuIFxyXG4gICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyLm90Ym81bHknLCBKU09OLnN0cmluZ2lmeSh1c2VyRGF0YSkpO1xyXG5cclxuICAgICAgICAgICAgJHJvb3RTY29wZS5pc0xvZ2dlZEluID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5Vc2VyTmFtZSA9IGRhdGEuVXNlck5hbWU7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuVXNlcklEID0gZGF0YS5JRDtcclxuXHJcbiAgICAgICAgICAgIGlmKGRhdGEuVXNlclR5cGVOYW1lID09PSAnY29va2VyJyl7XHJcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS5pc0Nvb2tlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy91c2Vycy8nKyBkYXRhLlVzZXJOYW1lICk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zaWdudXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmKCRzY29wZS5pc0Nvb2tlcil7XHJcbiAgICAgICAgJHNjb3BlLnVzZXIudXNlclR5cGUgPSAnY29va2VyJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkc2NvcGUudXNlci51c2VyVHlwZSA9ICd1c2VyJztcclxuICAgICAgfVxyXG4gICAgICBBdXRoLnNpZ251cCgkc2NvcGUudXNlcilcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKVxyXG5cclxuICAgICAgICAgaWYoZGF0YS5zdGF0dXMgPT09ICc1MDAnKXtcclxuICAgICAgICAgICAgJHNjb3BlLm1zZyA9ICdXcm9uZyBwYXNzd29yZCBvciB1c2VybmFtZSEnXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLm1zZyA9ICcnO1xyXG5cclxuICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY29tLm90Ym81bHknLCBkYXRhLnRva2VuKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB1c2VyRGF0YSA9IHtJRDpkYXRhLklELCBcclxuICAgICAgICAgICAgICBVc2VyTmFtZTogZGF0YS5Vc2VyTmFtZSwgVXNlclR5cGVOYW1lOiBkYXRhLlVzZXJUeXBlTmFtZX07XHJcbiBcclxuICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlci5vdGJvNWx5JywgSlNPTi5zdHJpbmdpZnkodXNlckRhdGEpKTtcclxuXHJcbiAgICAgICAgICAgICRyb290U2NvcGUuaXNMb2dnZWRJbiA9IHRydWU7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuVXNlck5hbWUgPSBkYXRhLlVzZXJOYW1lO1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLlVzZXJJRCA9IGRhdGEuSUQ7XHJcblxyXG4gICAgICAgICAgICBpZihkYXRhLlVzZXJUeXBlTmFtZSA9PT0gJ2Nvb2tlcicpe1xyXG4gICAgICAgICAgICAgICRyb290U2NvcGUuaXNDb29rZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvdXNlcnMvJysgZGF0YS5Vc2VyTmFtZSApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zaWdub3V0ID0gZnVuY3Rpb24oKXtcclxuICAgIEF1dGguc2lnbm91dCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gdmFyIGNoZWNrUGFzc3dvcmQgPSBmdW5jdGlvbihwYXNzd29yZCl7XHJcbiAgLy8gICB2YXIgcmVndWxhckV4cHJlc3Npb24gPSAvXig/PS4qWzAtOV0pKD89LipbIUAjJCVeJipdKVthLXpBLVowLTkhQCMkJV4mKl17NiwxNn0kLztcclxuICAvLyAgIHJldHVybiByZWd1bGFyRXhwcmVzc2lvbi50ZXN0KHBhc3N3b3JkKTtcclxuICAvLyB9O1xyXG5cclxuICAvLyB2YXIgY2hlY2tVc2VyTmFtZSA9IGZ1bmN0aW9uKHVzZXIpe1xyXG4gIC8vICAgdmFyIHJlZ3VsYXJFeHByZXNzaW9uID0gL15bYS16QS1aMC05XSskLztcclxuICAvLyAgIHJldHVybiByZWd1bGFyRXhwcmVzc2lvbi50ZXN0KHVzZXIpO1xyXG4gIC8vIH07XHJcblxyXG59KTtcclxuIl19